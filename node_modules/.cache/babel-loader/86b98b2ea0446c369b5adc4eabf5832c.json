{"ast":null,"code":"var _jsxFileName = \"/Users/dorianmeade/Desktop/dev/merng/merng-client/src/routes/Register.js\";\nimport React, { useContext, useState } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\n\nfunction Register(props) {\n  const context = useContext(AuthContext); //get context access\n\n  const [errors, setErrors] = useState('');\n  const {\n    onChange,\n    onSubmit,\n    values\n  } = useForm(registerUser, {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n  const [addUser, {\n    loading\n  }] = useMutation(REGISTER_USER, {\n    update(_, {\n      data: {\n        register: userData\n      }\n    }) {\n      context.login(userData); //update global context\n\n      props.history.push('/');\n    },\n\n    // triggered on function execute\n    onError(err) {\n      //front end error handling\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n\n    variables: values\n  });\n\n  function registerUser() {\n    addUser();\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: onSubmit,\n    noValidate: true,\n    className: loading ? 'loading' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, \"Register\"), /*#__PURE__*/React.createElement(Form.Input, {\n    label: \"Username\",\n    placeholder: \"Username..\",\n    name: \"username\",\n    type: \"text\",\n    error: errors.username ? true : false,\n    value: values.username,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    label: \"Email\",\n    placeholder: \"Email..\",\n    name: \"email\",\n    type: \"email\",\n    error: errors.email ? true : false,\n    value: values.email,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    label: \"Password\",\n    placeholder: \"Password..\",\n    name: \"password\",\n    type: \"password\",\n    error: errors.password ? true : false,\n    value: values.password,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    label: \"Confirm Password\",\n    placeholder: \"Confirm Password..\",\n    name: \"confirmPassword\",\n    type: \"password\",\n    error: errors.confirmPassword ? true : false,\n    value: values.confirmPassword,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    basic: true,\n    color: \"purple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, \"Register\")), Object.keys(errors).length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ui error message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, Object.values(errors).map(value => /*#__PURE__*/React.createElement(\"li\", {\n    key: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 29\n    }\n  }, value)))));\n} // write graphql mutation \n\n\nconst REGISTER_USER = gql`\n    mutation register(\n        $username: String!\n        $email: String!\n        $password: String!\n        $confirmPassword: String!\n    ) {\n        register(\n            registerInput: {\n                username: $username\n                email: $email\n                password: $password\n                confirmPassword: $confirmPassword\n            }\n        ) {\n            id\n            email\n            username\n            createdAt\n            token\n        }\n    }\n`;\nexport default Register;","map":{"version":3,"sources":["/Users/dorianmeade/Desktop/dev/merng/merng-client/src/routes/Register.js"],"names":["React","useContext","useState","Button","Form","useMutation","gql","AuthContext","useForm","Register","props","context","errors","setErrors","onChange","onSubmit","values","registerUser","username","email","password","confirmPassword","addUser","loading","REGISTER_USER","update","_","data","register","userData","login","history","push","onError","err","graphQLErrors","extensions","exception","variables","Object","keys","length","map","value"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { Button, Form } from 'semantic-ui-react'\nimport { useMutation } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\n\nimport { AuthContext } from '../context/auth'\nimport { useForm } from '../util/hooks';\n\nfunction Register(props) {\n    const context = useContext(AuthContext); //get context access\n    const [errors, setErrors] = useState('');\n\n    const { onChange, onSubmit, values } = useForm(registerUser, {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n    });\n\n    const [addUser, { loading }] = useMutation(REGISTER_USER, {\n        update(_, {data: {register: userData}}){\n            context.login(userData); //update global context\n            props.history.push('/');\n        }, // triggered on function execute\n        onError(err){ //front end error handling\n            setErrors(err.graphQLErrors[0].extensions.exception.errors)\n        },\n        variables: values\n    });\n\n    function registerUser(){\n        addUser();\n    }\n    return (\n        <div className=\"form-container\">\n            <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n                <h1>Register</h1>\n                <Form.Input \n                    label=\"Username\"\n                    placeholder=\"Username..\"\n                    name=\"username\"\n                    type=\"text\"\n                    error={errors.username ? true : false}\n                    value={values.username}\n                    onChange={onChange}\n                />\n                <Form.Input \n                    label=\"Email\"\n                    placeholder=\"Email..\"\n                    name=\"email\"\n                    type=\"email\"\n                    error={errors.email ? true : false}\n                    value={values.email}\n                    onChange={onChange}\n                />\n                <Form.Input \n                    label=\"Password\"\n                    placeholder=\"Password..\"\n                    name=\"password\"\n                    type=\"password\"\n                    error={errors.password ? true : false}\n                    value={values.password}\n                    onChange={onChange}\n                />\n                <Form.Input \n                    label=\"Confirm Password\"\n                    placeholder=\"Confirm Password..\"\n                    name=\"confirmPassword\"\n                    type=\"password\"\n                    error={errors.confirmPassword ? true : false}\n                    value={values.confirmPassword}\n                    onChange={onChange}\n                />\n                <Button type=\"submit\" basic color=\"purple\">\n                    Register\n                </Button>\n            </Form> \n            {Object.keys(errors).length > 0 && (\n                <div className=\"ui error message\">\n                    <ul className=\"list\">\n                        {Object.values(errors).map(value => (\n                            <li key={value}>{value}</li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    );\n}\n\n// write graphql mutation \nconst REGISTER_USER = gql`\n    mutation register(\n        $username: String!\n        $email: String!\n        $password: String!\n        $confirmPassword: String!\n    ) {\n        register(\n            registerInput: {\n                username: $username\n                email: $email\n                password: $password\n                confirmPassword: $confirmPassword\n            }\n        ) {\n            id\n            email\n            username\n            createdAt\n            token\n        }\n    }\n`;\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}