{"ast":null,"code":"var _jsxFileName = \"/Users/dorianmeade/Desktop/dev/merng/merng-client/src/components/PostForm.js\";\nimport React from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useForm } from '../util/hooks';\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\n\nfunction PostForm() {\n  const {\n    values,\n    onChange,\n    onSubmit\n  } = useForm(createPostCallback, {\n    body: ''\n  });\n  const [createPost, {\n    error\n  }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY\n      });\n      const newPost = result.data.createPost;\n      proxy.writeQuery({\n        query: FETCH_POSTS_QUERY,\n        data: {\n          getPosts: [newPost, ...data.getPosts]\n        }\n      });\n      values.body = '';\n    },\n\n    onError(err) {\n      //fixed the error break bug\n      console.log(err);\n    }\n\n  });\n\n  function createPostCallback() {\n    createPost();\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, \"Create a post:\"), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Input, {\n    placeholder: \"Whatcha thinking\",\n    name: \"body\",\n    onChange: onChange,\n    value: values.body,\n    error: error ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"purple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, \"Submit\"))), error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ui error message\",\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }, error.graphQLErrors[0].message))));\n}\n\nconst CREATE_POST_MUTATION = gql`\n    mutation createPost($body: String!) {\n        createPost(body: $body) {\n        id\n        body\n        createdAt\n        username\n        likes {\n            id\n            username\n            createdAt\n        }\n        likeCount\n        comments {\n            id\n            body\n            username\n            createdAt\n        }\n        commentCount\n        }\n    }\n`;\nexport default PostForm;","map":{"version":3,"sources":["/Users/dorianmeade/Desktop/dev/merng/merng-client/src/components/PostForm.js"],"names":["React","Button","Form","gql","useMutation","useForm","FETCH_POSTS_QUERY","PostForm","values","onChange","onSubmit","createPostCallback","body","createPost","error","CREATE_POST_MUTATION","variables","update","proxy","result","data","readQuery","query","newPost","writeQuery","getPosts","onError","err","console","log","marginBottom","graphQLErrors","message"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\n\nimport { useForm } from '../util/hooks';\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\n\nfunction PostForm() {\n    const { values, onChange, onSubmit } = useForm(createPostCallback, {\n        body: ''\n    });\n\n    const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n        variables: values,\n        update(proxy, result) {\n            const data = proxy.readQuery({\n                query: FETCH_POSTS_QUERY\n            });\n            const newPost = result.data.createPost;\n            proxy.writeQuery({ \n                query: FETCH_POSTS_QUERY, \n                data: { getPosts: [newPost, ...data.getPosts] } \n            });\n            values.body = '';\n        },\n        onError(err){ //fixed the error break bug\n            console.log(err);\n        },\n    });\n\n    function createPostCallback() {\n    createPost();\n    }\n\n    return (\n        <>\n            <Form onSubmit={onSubmit}>\n            <h2>Create a post:</h2>\n            <Form.Field>\n                <Form.Input\n                placeholder=\"Whatcha thinking\"\n                name=\"body\"\n                onChange={onChange}\n                value={values.body}\n                error={error ? true : false}\n                />\n                <Button type=\"submit\" color=\"purple\">\n                Submit\n                </Button>\n            </Form.Field>\n            </Form>\n            {error && (\n                <div className=\"ui error message\" style={{marginBottom: 20}}>\n                    <ul className = \"list\">\n                        <li>{error.graphQLErrors[0].message}</li>\n                    </ul>\n                </div>\n            )}\n        </>\n    );\n}\n\nconst CREATE_POST_MUTATION = gql`\n    mutation createPost($body: String!) {\n        createPost(body: $body) {\n        id\n        body\n        createdAt\n        username\n        likes {\n            id\n            username\n            createdAt\n        }\n        likeCount\n        comments {\n            id\n            body\n            username\n            createdAt\n        }\n        commentCount\n        }\n    }\n`;\n\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}