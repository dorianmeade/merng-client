{"ast":null,"code":"var _jsxFileName = \"/Users/dorianmeade/Desktop/dev/merng/merng-client/src/context/auth.js\";\nimport React, { useReducer, createContext } from 'react';\nimport jwtDecode from 'jwt-decode';\nconst initialState = {\n  user: null\n};\n\nif (localStorage.getItem('jwtToken')) {\n  // decode token to compute expiration\n  const decodedToken = jwtDecode(localStorage.getItem('jwtToken'));\n\n  if (decodedToken.exp * 1000 < Date.now()) {\n    localStorage.removeItem('jwtToken');\n  } else {\n    initialState.user = decodedToken;\n  }\n}\n\nconst AuthContext = createContext({\n  user: null,\n  login: userData => {},\n  logout: () => {}\n}); //* need to create reducer -> recieve action with type and payload, determines what to do\n//! get familiar with redux patterns\n\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case 'LOGIN':\n      return { ...state,\n        user: action.payload\n      };\n\n    case 'LOGOUT':\n      return { ...state,\n        user: null\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction AuthProvider(props) {\n  const [state, dispatch] = useReducer(authReducer, initialState); // *dispatch any action and attach to it a type and a payload \n  //*on login, trigger function to dispatch login type, data -> set context\n\n  function login(userData) {\n    localStorage.setItem('jwtToken', userData.token);\n    dispatch({\n      type: 'LOGIN',\n      payload: userData\n    });\n  }\n\n  function logout() {\n    localStorage.removeItem('jwtToken');\n    dispatch({\n      type: 'LOGOUT'\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, Object.assign({\n    value: {\n      user: state.user,\n      login,\n      logout\n    }\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport { AuthContext, AuthProvider };","map":{"version":3,"sources":["/Users/dorianmeade/Desktop/dev/merng/merng-client/src/context/auth.js"],"names":["React","useReducer","createContext","jwtDecode","initialState","user","localStorage","getItem","decodedToken","exp","Date","now","removeItem","AuthContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","dispatch","setItem","token"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,QAAiD,OAAjD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AADW,CAArB;;AAIA,IAAIC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAJ,EAAqC;AACjC;AACA,QAAMC,YAAY,GAAGL,SAAS,CAACG,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAD,CAA9B;;AAEA,MAAIC,YAAY,CAACC,GAAb,GAAmB,IAAnB,GAA0BC,IAAI,CAACC,GAAL,EAA9B,EAAyC;AACrCL,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACH,GAFD,MAEO;AACHR,IAAAA,YAAY,CAACC,IAAb,GAAoBG,YAApB;AACH;AACJ;;AAED,MAAMK,WAAW,GAAGX,aAAa,CAAC;AAC9BG,EAAAA,IAAI,EAAE,IADwB;AAE9BS,EAAAA,KAAK,EAAGC,QAAD,IAAc,CAAE,CAFO;AAG9BC,EAAAA,MAAM,EAAE,MAAM,CAAE;AAHc,CAAD,CAAjC,C,CAMA;AACI;;AACJ,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAmC;AAC/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,OAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHb,QAAAA,IAAI,EAAEc,MAAM,CAACE;AAFV,OAAP;;AAIJ,SAAK,QAAL;AACI,aAAO,EACH,GAAGH,KADA;AAEHb,QAAAA,IAAI,EAAE;AAFH,OAAP;;AAIJ;AACI,aAAOa,KAAP;AAZR;AAcH;;AAED,SAASI,YAAT,CAAsBC,KAAtB,EAA4B;AACxB,QAAK,CAACL,KAAD,EAAQM,QAAR,IAAoBvB,UAAU,CAACgB,WAAD,EAAcb,YAAd,CAAnC,CADwB,CAExB;AAEA;;AACA,WAASU,KAAT,CAAeC,QAAf,EAAwB;AACpBT,IAAAA,YAAY,CAACmB,OAAb,CAAqB,UAArB,EAAiCV,QAAQ,CAACW,KAA1C;AACAF,IAAAA,QAAQ,CAAC;AACLJ,MAAAA,IAAI,EAAE,OADD;AAELC,MAAAA,OAAO,EAAEN;AAFJ,KAAD,CAAR;AAIH;;AAED,WAASC,MAAT,GAAiB;AACbV,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACAY,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACH;;AAED,sBACI,oBAAC,WAAD,CAAa,QAAb;AACI,IAAA,KAAK,EAAE;AAAEf,MAAAA,IAAI,EAAEa,KAAK,CAACb,IAAd;AAAoBS,MAAAA,KAApB;AAA2BE,MAAAA;AAA3B;AADX,KAEQO,KAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAMH;;AAED,SAASV,WAAT,EAAsBS,YAAtB","sourcesContent":["import React, { useReducer, createContext } from 'react'\nimport jwtDecode from 'jwt-decode'\n\nconst initialState = {\n    user: null\n}\n\nif (localStorage.getItem('jwtToken')){\n    // decode token to compute expiration\n    const decodedToken = jwtDecode(localStorage.getItem('jwtToken'));\n\n    if (decodedToken.exp * 1000 < Date.now()){\n        localStorage.removeItem('jwtToken');\n    } else {\n        initialState.user = decodedToken;\n    }\n}\n\nconst AuthContext = createContext({\n    user: null,\n    login: (userData) => {},\n    logout: () => {}\n})\n\n//* need to create reducer -> recieve action with type and payload, determines what to do\n    //! get familiar with redux patterns\nfunction authReducer(state, action){\n    switch(action.type){\n        case 'LOGIN':\n            return {\n                ...state, \n                user: action.payload\n            }\n        case 'LOGOUT':\n            return {\n                ...state, \n                user: null\n            }\n        default: \n            return state;\n    }\n}\n\nfunction AuthProvider(props){\n    const[state, dispatch] = useReducer(authReducer, initialState);\n    // *dispatch any action and attach to it a type and a payload \n\n    //*on login, trigger function to dispatch login type, data -> set context\n    function login(userData){\n        localStorage.setItem('jwtToken', userData.token)\n        dispatch({\n            type: 'LOGIN', \n            payload: userData\n        })\n    }\n    \n    function logout(){\n        localStorage.removeItem('jwtToken')\n        dispatch({ type: 'LOGOUT' })\n    }\n\n    return(\n        <AuthContext.Provider\n            value={{ user: state.user, login, logout }}\n            {...props}\n        />\n    )\n}\n\nexport { AuthContext, AuthProvider }"]},"metadata":{},"sourceType":"module"}