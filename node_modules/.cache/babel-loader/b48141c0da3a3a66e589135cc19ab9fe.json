{"ast":null,"code":"var _jsxFileName = \"/Users/dorianmeade/Desktop/dev/merng/merng-client/src/routes/SinglePost.js\";\nimport React, { useContext, useState, useRef } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { Grid, Image, Card, Button, Icon, Label, Form } from 'semantic-ui-react';\nimport moment from 'moment';\nimport { AuthContext } from '../context/auth';\nimport LikeButton from '../components/LikeButton';\nimport DeleteButton from '../components/DeleteButton';\nimport MyPopup from '../util/MyPopup';\n\nfunction SinglePost(props) {\n  // get id from url \n  const postId = props.match.params.postId;\n  const {\n    user\n  } = useContext(AuthContext); // get context access\n\n  const commentInputRef = useRef(null);\n  const [comment, setComment] = useState(''); // query the posts to find one given id \n\n  const {\n    data\n  } = useQuery(FETCH_POST_QUERY, {\n    variables: {\n      postId\n    }\n  }); // array destructure mutation \n\n  const [createComment] = useMutation(CREATE_COMMENT_MUTATION, {\n    update() {\n      // set comment back to empty string after addeing\n      setComment(''); // blur submit button after it is pressed\n\n      commentInputRef.current.blur();\n    },\n\n    // pass variables for this mutation\n    variables: {\n      postId,\n      body: comment\n    }\n  }); // route to home page after delete post\n\n  function deletePostCallback() {\n    props.history.push('/');\n  }\n\n  let postMarkup;\n\n  if (!data) {\n    postMarkup = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 22\n      }\n    }, \"Loading post..\"); //TODO: change to loading spinner \n  } else {\n    const {\n      id,\n      body,\n      createdAt,\n      username,\n      comments,\n      likes,\n      commentCount,\n      likeCount\n    } = data.getPost; // define card ui \n\n    postMarkup = /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: \"https://react.semantic-ui.com/images/avatar/large/molly.png\",\n      size: \"small\",\n      float: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 33\n      }\n    }, username), /*#__PURE__*/React.createElement(Card.Meta, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 33\n      }\n    }, moment(createdAt).fromNow(true)), /*#__PURE__*/React.createElement(Card.Description, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 33\n      }\n    }, body)), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Card.Content, {\n      extra: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(LikeButton, {\n      user: user,\n      post: {\n        id,\n        likeCount,\n        likes\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(MyPopup, {\n      content: \"Comment on post\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      as: \"div\",\n      labelPosition: \"right\",\n      onClick: () => console.log('Comment on post'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      basic: true,\n      color: \"teal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(Label, {\n      basic: true,\n      color: \"teal\",\n      pointing: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 41\n      }\n    }, commentCount))), user && user.username === username && /*#__PURE__*/React.createElement(DeleteButton, {\n      postId: id,\n      callback: deletePostCallback,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 76\n      }\n    }))), user && /*#__PURE__*/React.createElement(Card, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 37\n      }\n    }, \"Post a comment\"), /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui action input fluid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Leave a nice comment...\",\n      name: \"comment\",\n      value: comment,\n      onChange: event => setComment(event.target.value),\n      ref: commentInputRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"ui button purple\",\n      disabled: comment.trim() === '',\n      onClick: createComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 45\n      }\n    }, \"Submit\"))))), comments.map(comment => /*#__PURE__*/React.createElement(Card, {\n      fluid: true,\n      key: comment.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 33\n      }\n    }, user && user.username === comment.username && /*#__PURE__*/React.createElement(DeleteButton, {\n      postId: id,\n      commentId: comment.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 84\n      }\n    }), /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 37\n      }\n    }, comment.username), /*#__PURE__*/React.createElement(Card.Meta, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 37\n      }\n    }, moment(comment.createdAt).fromNow()), /*#__PURE__*/React.createElement(Card.Description, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 37\n      }\n    }, comment.body)))))));\n  }\n\n  return postMarkup;\n}\n\nconst CREATE_COMMENT_MUTATION = gql`\n    mutation($postId: String!, $body: String!) {\n        createComment(postId: $postId, body: $body) {\n            id\n            comments {\n                id \n                body\n                createdAt\n                username\n            }\n            commentCount\n        }\n    }\n`;\nconst FETCH_POST_QUERY = gql`\n    query($postId: ID!) {\n        getPost(postId: $postId) {\n        id\n        body\n        createdAt\n        username\n        likeCount\n        likes {\n            username\n        }\n        commentCount\n        comments {\n            id\n            username\n            createdAt\n            body\n        }\n        }\n    }\n`;\nexport default SinglePost;","map":{"version":3,"sources":["/Users/dorianmeade/Desktop/dev/merng/merng-client/src/routes/SinglePost.js"],"names":["React","useContext","useState","useRef","gql","useQuery","useMutation","Grid","Image","Card","Button","Icon","Label","Form","moment","AuthContext","LikeButton","DeleteButton","MyPopup","SinglePost","props","postId","match","params","user","commentInputRef","comment","setComment","data","FETCH_POST_QUERY","variables","createComment","CREATE_COMMENT_MUTATION","update","current","blur","body","deletePostCallback","history","push","postMarkup","id","createdAt","username","comments","likes","commentCount","likeCount","getPost","fromNow","console","log","event","target","value","trim","map"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useRef } from 'react'\nimport gql from 'graphql-tag'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport { Grid, Image, Card, Button, Icon, Label, Form } from 'semantic-ui-react';\nimport moment from 'moment'\n\nimport { AuthContext } from '../context/auth'\nimport LikeButton from '../components/LikeButton'\nimport DeleteButton from '../components/DeleteButton'\nimport MyPopup from '../util/MyPopup'\n\n\nfunction SinglePost(props){\n    // get id from url \n    const postId = props.match.params.postId;\n    const { user } = useContext(AuthContext); // get context access\n\n    const commentInputRef = useRef(null);\n\n    const [comment, setComment] = useState('');\n\n    // query the posts to find one given id \n    const { data } = useQuery(FETCH_POST_QUERY, {\n        variables: {\n            postId\n        }\n    });\n\n    // array destructure mutation \n    const [createComment] = useMutation(CREATE_COMMENT_MUTATION, {\n        update(){\n            // set comment back to empty string after addeing\n            setComment('')\n            // blur submit button after it is pressed\n            commentInputRef.current.blur()\n        },\n        // pass variables for this mutation\n        variables: {\n            postId, \n            body: comment\n        }\n    })\n\n    // route to home page after delete post\n    function deletePostCallback() {\n        props.history.push('/');\n        }\n\n    let postMarkup; \n    if(!data){\n        postMarkup = <p>Loading post..</p> //TODO: change to loading spinner \n    }else {\n        const { id, body, createdAt, username, comments, likes, commentCount, likeCount} = data.getPost\n\n        // define card ui \n        postMarkup = (\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={2}>\n                        <Image\n                            src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n                            size=\"small\"\n                            float=\"right\" />\n                    </Grid.Column>\n                    <Grid.Column width={10}>\n                        <Card fluid>\n                            <Card.Content>\n                                <Card.Header>{username}</Card.Header>\n                                <Card.Meta>\n                                    {moment(createdAt).fromNow(true)}\n                                </Card.Meta>\n                                <Card.Description>{body}</Card.Description>\n                            </Card.Content>\n                            <hr/>\n                            <Card.Content extra>\n                                <LikeButton user={user} post={{id, likeCount, likes}}/>\n                                <MyPopup \n                                    content=\"Comment on post\" \n                                >\n                                    <Button\n                                        as=\"div\"\n                                        labelPosition=\"right\"\n                                        onClick={() => console.log('Comment on post')}\n                                        >\n                                        <Button basic color=\"teal\">\n                                            <Icon name=\"comment\"/>\n                                        </Button>\n                                        <Label basic color=\"teal\" pointing=\"left\">\n                                            {commentCount}\n                                        </Label>\n                                    </Button>\n                                    </MyPopup>\n                                    {user && user.username === username && <DeleteButton postId={id} callback={deletePostCallback}/>}\n                            </Card.Content>\n                        </Card>\n                        {/* display comment input option */}\n                        {user && (\n                            <Card fluid>\n                                <Card.Content>\n                                    <p>Post a comment</p>\n                                    <Form>\n                                        {/* equiv of form.input in css */}\n                                        <div className=\"ui action input fluid\">\n                                            <input \n                                                type=\"text\"\n                                                placeholder=\"Leave a nice comment...\"\n                                                name=\"comment\"\n                                                value={comment}\n                                                onChange={event => setComment(event.target.value)}\n                                                ref={commentInputRef}\n                                            />\n                                            {/* disable submit button if comment is empty */}\n                                            <button \n                                                type = \"submit\"\n                                                className=\"ui button purple\"\n                                                disabled={comment.trim() === ''}\n                                                onClick={createComment}\n                                                >Submit</button>\n                                        </div>\n                                    </Form>\n                                </Card.Content>\n                            </Card>\n                        )}\n                        {/* display comments after post body*/}\n                        {comments.map(comment => (\n                            <Card fluid key={comment.id}>\n                                <Card.Content>\n                                    {user && user.username === comment.username && <DeleteButton postId={id} commentId={comment.id}/>}\n                                    <Card.Header>{comment.username}</Card.Header>\n                                    <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\n                                    <Card.Description>{comment.body}</Card.Description>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n    return(\n        postMarkup\n    )\n}\n\nconst CREATE_COMMENT_MUTATION = gql`\n    mutation($postId: String!, $body: String!) {\n        createComment(postId: $postId, body: $body) {\n            id\n            comments {\n                id \n                body\n                createdAt\n                username\n            }\n            commentCount\n        }\n    }\n`\n\nconst FETCH_POST_QUERY = gql`\n    query($postId: ID!) {\n        getPost(postId: $postId) {\n        id\n        body\n        createdAt\n        username\n        likeCount\n        likes {\n            username\n        }\n        commentCount\n        comments {\n            id\n            username\n            createdAt\n            body\n        }\n        }\n    }\n`; \n\nexport default SinglePost;\n"]},"metadata":{},"sourceType":"module"}