{"ast":null,"code":"var _jsxFileName = \"/Users/dorianmeade/Desktop/dev/merng/merng-client/src/routes/Login.js\";\nimport React, { useContext, useState } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\n\nfunction Login(props) {\n  const context = useContext(AuthContext); //get context access\n\n  const [errors, setErrors] = useState('');\n  const {\n    onChange,\n    onSubmit,\n    values\n  } = useForm(loginUserCallback, {\n    username: '',\n    password: ''\n  });\n  const [loginUser, {\n    loading\n  }] = useMutation(LOGIN_USER, {\n    update(_, {\n      data: {\n        login: userData\n      }\n    }) {\n      //console.log(result.data.login)\n      context.login(userData);\n      props.history.push('/'); // after submit, redirect to home page\n    },\n\n    // triggered on function execute\n    onError(err) {\n      // set front end errors to back end errors\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n\n    variables: values\n  });\n\n  function loginUserCallback() {\n    loginUser();\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: onSubmit,\n    noValidate: true,\n    className: loading ? 'loading' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, \"Login\"), /*#__PURE__*/React.createElement(Form.Input, {\n    label: \"Username\",\n    placeholder: \"Username..\",\n    name: \"username\",\n    type: \"text\",\n    error: errors.username ? true : false,\n    value: values.username,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    label: \"Password\",\n    placeholder: \"Password..\",\n    name: \"password\",\n    type: \"password\",\n    error: errors.password ? true : false,\n    value: values.password,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, \"Login\")), Object.keys(errors).length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ui error message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, Object.values(errors).map(value => /*#__PURE__*/React.createElement(\"li\", {\n    key: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 29\n    }\n  }, value)))));\n} // write graphql mutation \n\n\nconst LOGIN_USER = gql`\n    mutation login(\n        $username: String!\n        $password: String!\n    ) {\n        login(\n            username: $username\n            password: $password\n        ) {\n            id\n            email\n            username\n            createdAt\n            token\n        }\n    }\n`;\nexport default Login;","map":{"version":3,"sources":["/Users/dorianmeade/Desktop/dev/merng/merng-client/src/routes/Login.js"],"names":["React","useContext","useState","Button","Form","useMutation","gql","AuthContext","useForm","Login","props","context","errors","setErrors","onChange","onSubmit","values","loginUserCallback","username","password","loginUser","loading","LOGIN_USER","update","_","data","login","userData","history","push","onError","err","graphQLErrors","extensions","exception","variables","Object","keys","length","map","value"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { Button, Form } from 'semantic-ui-react'\nimport { useMutation } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\n\nimport { AuthContext } from '../context/auth'\nimport { useForm } from '../util/hooks';\n\nfunction Login(props) {\n    const context = useContext(AuthContext); //get context access\n    const [errors, setErrors] = useState('');\n    \n    const { onChange, onSubmit, values } = useForm(loginUserCallback, {\n        username: '',\n        password: '',\n    });\n\n    const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n        update(_, {data: {login: userData}}){\n            //console.log(result.data.login)\n            context.login(userData)\n            props.history.push('/'); // after submit, redirect to home page\n        }, // triggered on function execute\n        onError(err){ // set front end errors to back end errors\n            setErrors(err.graphQLErrors[0].extensions.exception.errors)\n        },\n        variables: values\n    });\n\n    function loginUserCallback(){\n        loginUser();\n    }\n\n    return (\n        <div className=\"form-container\">\n            <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n                <h1>Login</h1>\n                <Form.Input \n                    label=\"Username\"\n                    placeholder=\"Username..\"\n                    name=\"username\"\n                    type=\"text\"\n                    error={errors.username ? true : false}\n                    value={values.username}\n                    onChange={onChange}\n                />\n                <Form.Input \n                    label=\"Password\"\n                    placeholder=\"Password..\"\n                    name=\"password\"\n                    type=\"password\"\n                    error={errors.password ? true : false}\n                    value={values.password}\n                    onChange={onChange}\n                />\n                <Button type=\"submit\" primary>\n                    Login\n                </Button>\n            </Form> \n            {Object.keys(errors).length > 0 && (\n                <div className=\"ui error message\">\n                    <ul className=\"list\">\n                        {Object.values(errors).map(value => (\n                            <li key={value}>{value}</li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    );\n}\n\n// write graphql mutation \nconst LOGIN_USER = gql`\n    mutation login(\n        $username: String!\n        $password: String!\n    ) {\n        login(\n            username: $username\n            password: $password\n        ) {\n            id\n            email\n            username\n            createdAt\n            token\n        }\n    }\n`;\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}